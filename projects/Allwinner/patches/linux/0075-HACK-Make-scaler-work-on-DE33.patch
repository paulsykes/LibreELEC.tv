From aa09e86d07c348b6c23ffcd99975538459fcc08c Mon Sep 17 00:00:00 2001
From: Jernej Skrabec <jernej.skrabec@gmail.com>
Date: Tue, 24 Oct 2023 17:35:40 +0200
Subject: [PATCH 02/11] HACK: Make scaler work on DE33

---
 drivers/gpu/drm/sun4i/sun8i_mixer.c     |  11 +--
 drivers/gpu/drm/sun4i/sun8i_mixer.h     |   3 +
 drivers/gpu/drm/sun4i/sun8i_vi_scaler.c | 107 +++++++++++++++++-------
 drivers/gpu/drm/sun4i/sun8i_vi_scaler.h |   9 +-
 4 files changed, 92 insertions(+), 38 deletions(-)

diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.c b/drivers/gpu/drm/sun4i/sun8i_mixer.c
index c68dc017779f..4b5c063c2c99 100644
--- a/drivers/gpu/drm/sun4i/sun8i_mixer.c
+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.c
@@ -261,13 +261,14 @@ int sun8i_mixer_drm_format_to_hw(u32 format, u32 *hw_format)
 static void sun8i_mixer_commit(struct sunxi_engine *engine)
 {
 	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
+	int i;
+
+	for (i = 0; i < 4; i++)
+		sun8i_vi_scaler_apply(mixer, i);
 
 	DRM_DEBUG_DRIVER("Committing changes\n");
 
-	if (mixer->cfg->de_type == sun8i_mixer_de33)
-		regmap_write(mixer->top_regs, SUN50I_MIXER_GLOBAL_DBUFF,
-			     SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
-	else
+	if (mixer->cfg->de_type != sun8i_mixer_de33)
 		regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF,
 			     SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
 }
@@ -406,7 +407,7 @@ static void sun8i_mixer_disable_color_correction(struct sunxi_engine *engine)
 }
 
 static const struct sunxi_engine_ops sun8i_engine_ops = {
-	.commit			= sun8i_mixer_commit,
+	.vblank_quirk		= sun8i_mixer_commit,
 	.layers_init		= sun8i_layers_init,
 	.mode_set		= sun8i_mixer_mode_set,
 	.get_supported_fmts	= sun8i_mixer_get_supported_fmts,
diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.h b/drivers/gpu/drm/sun4i/sun8i_mixer.h
index a40bbe168573..c996ec2b37ac 100644
--- a/drivers/gpu/drm/sun4i/sun8i_mixer.h
+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.h
@@ -11,6 +11,7 @@
 #include <linux/reset.h>
 
 #include "sunxi_engine.h"
+#include "sun8i_vi_scaler.h"
 
 #define SUN8I_MIXER_SIZE(w, h)			(((h) - 1) << 16 | ((w) - 1))
 #define SUN8I_MIXER_COORD(x, y)			((y) << 16 | (x))
@@ -204,6 +205,8 @@ struct sun8i_mixer {
 
 	struct regmap			*top_regs;
 	struct regmap			*disp_regs;
+
+	struct scaler_state		vi_scl_states[4];
 };
 
 static inline struct sun8i_mixer *
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
index 9c7f6e7d71d5..4d4488db6b75 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
@@ -10,6 +10,7 @@
  */
 
 #include "sun8i_vi_scaler.h"
+#include "sun8i_mixer.h"
 
 static const u32 lan3coefftab32_left[480] = {
 	0x40000000, 0x40fe0000, 0x3ffd0100, 0x3efc0100,
@@ -877,11 +878,22 @@ static int sun8i_vi_scaler_coef_index(unsigned int step)
 	}
 }
 
-static void sun8i_vi_scaler_set_coeff_vi(struct regmap *map, u32 base,
+static inline void sun8i_vi_scaler_reg_write(struct scaler_state *state, u32 reg, u32 value)
+{
+	memcpy(&state->regs[reg], &value, sizeof(u32));
+}
+
+static inline void sun8i_vi_scaler_reg_bulk_write(struct scaler_state *state, u32 reg, const u32 *values, unsigned int count)
+{
+	memcpy(&state->regs[reg], values, sizeof(u32) * count);
+}
+
+static void sun8i_vi_scaler_set_coeff_vi(struct scaler_state *state,
 					 u32 hstep, u32 vstep,
 					 const struct drm_format_info *format)
 {
 	const u32 *ch_left, *ch_right, *cy;
+	u32 base = 0;
 	int offset;
 
 	if (format->is_yuv) {
@@ -896,55 +908,54 @@ static void sun8i_vi_scaler_set_coeff_vi(struct regmap *map, u32 base,
 
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
 			  &lan3coefftab32_left[offset],
 			  SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YHCOEFF1(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YHCOEFF1(base, 0),
 			  &lan3coefftab32_right[offset],
 			  SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
 			  &ch_left[offset], SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CHCOEFF1(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CHCOEFF1(base, 0),
 			  &ch_right[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
 			  &lan2coefftab32[offset], SUN8I_VI_SCALER_COEFF_COUNT);
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CVCOEFF(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CVCOEFF(base, 0),
 			  &cy[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 }
 
-static void sun8i_vi_scaler_set_coeff_ui(struct regmap *map, u32 base,
+static void sun8i_vi_scaler_set_coeff_ui(struct scaler_state *state,
 					 u32 hstep, u32 vstep,
 					 const struct drm_format_info *format)
 {
 	const u32 *table;
+	u32 base = 0;
 	int offset;
 
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YHCOEFF0(base, 0),
 			  &lan2coefftab32[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 	offset = sun8i_vi_scaler_coef_index(vstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_YVCOEFF(base, 0),
 			  &lan2coefftab32[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 
 	table = format->is_yuv ? bicubic4coefftab32 : lan2coefftab32;
 	offset = sun8i_vi_scaler_coef_index(hstep) *
 			SUN8I_VI_SCALER_COEFF_COUNT;
-	regmap_bulk_write(map, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
+	sun8i_vi_scaler_reg_bulk_write(state, SUN8I_SCALER_VSU_CHCOEFF0(base, 0),
 			  &table[offset], SUN8I_VI_SCALER_COEFF_COUNT);
 }
 
 void sun8i_vi_scaler_disable(struct sun8i_mixer *mixer, int layer)
 {
-	u32 base;
+	struct scaler_state *state = &mixer->vi_scl_states[layer];
 
-	base = sun8i_vi_scaler_base(mixer, layer);
-
-	regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base), 0);
+	sun8i_vi_scaler_reg_write(state, SUN8I_SCALER_VSU_CTRL(0), 0);
 }
 
 void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
@@ -952,11 +963,12 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 			   u32 hscale, u32 vscale, u32 hphase, u32 vphase,
 			   const struct drm_format_info *format)
 {
+	struct scaler_state *state = &mixer->vi_scl_states[layer];
 	u32 chphase, cvphase;
 	u32 insize, outsize;
 	u32 base;
 
-	base = sun8i_vi_scaler_base(mixer, layer);
+	base = 0;//sun8i_vi_scaler_base(mixer, layer);
 
 	hphase <<= SUN8I_VI_SCALER_PHASE_FRAC - 16;
 	vphase <<= SUN8I_VI_SCALER_PHASE_FRAC - 16;
@@ -980,7 +992,7 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 		cvphase = vphase;
 	}
 
-	regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base),
+	sun8i_vi_scaler_reg_write(state, SUN8I_SCALER_VSU_CTRL(base),
 		     SUN8I_SCALER_VSU_CTRL_EN);
 
 	if (mixer->cfg->de_type >= sun8i_mixer_de3) {
@@ -991,46 +1003,77 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 		else
 			val = SUN50I_SCALER_VSU_SCALE_MODE_NORMAL;
 
-		regmap_write(mixer->engine.regs,
+		sun8i_vi_scaler_reg_write(state,
 			     SUN50I_SCALER_VSU_SCALE_MODE(base), val);
 	}
 
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_OUTSIZE(base), outsize);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YINSIZE(base), insize);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YHSTEP(base), hscale);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YVSTEP(base), vscale);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YHPHASE(base), hphase);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_YVPHASE(base), vphase);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CINSIZE(base),
 		     SUN8I_VI_SCALER_SIZE(src_w / format->hsub,
 					  src_h / format->vsub));
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CHSTEP(base),
 		     hscale / format->hsub);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CVSTEP(base),
 		     vscale / format->vsub);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CHPHASE(base), chphase);
-	regmap_write(mixer->engine.regs,
+	sun8i_vi_scaler_reg_write(state,
 		     SUN8I_SCALER_VSU_CVPHASE(base), cvphase);
 
 	if (sun8i_vi_scaler_is_vi_plane(mixer, layer))
-		sun8i_vi_scaler_set_coeff_vi(mixer->engine.regs, base,
+		sun8i_vi_scaler_set_coeff_vi(state,
 					     hscale, vscale, format);
 	else
-		sun8i_vi_scaler_set_coeff_ui(mixer->engine.regs, base,
+		sun8i_vi_scaler_set_coeff_ui(state,
 					     hscale, vscale, format);
 
 	if (mixer->cfg->de_type <= sun8i_mixer_de3)
-		regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base),
+		sun8i_vi_scaler_reg_write(state, SUN8I_SCALER_VSU_CTRL(base),
 			     SUN8I_SCALER_VSU_CTRL_EN |
 			     SUN8I_SCALER_VSU_CTRL_COEFF_RDY);
 }
+
+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer)
+{
+	struct scaler_state *state = &mixer->vi_scl_states[layer];
+	bool vi_plane = sun8i_vi_scaler_is_vi_plane(mixer, layer);
+	u32 base = sun8i_vi_scaler_base(mixer, layer);
+
+	if (!state->regs[0]) {
+		regmap_write(mixer->engine.regs, SUN8I_SCALER_VSU_CTRL(base), 0);
+		return;
+	}
+
+	regmap_bulk_write(mixer->engine.regs, base, &state->regs[0], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x10, &state->regs[0x10], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x40, &state->regs[0x40], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x80, &state->regs[0x80], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x88, &state->regs[0x88], 3);
+	regmap_bulk_write(mixer->engine.regs, base + 0x98, &state->regs[0x98], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0xc0, &state->regs[0xc0], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0xc8, &state->regs[0xc8], 3);
+	regmap_bulk_write(mixer->engine.regs, base + 0xd8, &state->regs[0xd8], 1);
+	regmap_bulk_write(mixer->engine.regs, base + 0x200, &state->regs[0x200], 32);
+	if (vi_plane)
+		regmap_bulk_write(mixer->engine.regs, base + 0x300, &state->regs[0x300], 32);
+	regmap_bulk_write(mixer->engine.regs, base + 0x400, &state->regs[0x400], 32);
+	regmap_bulk_write(mixer->engine.regs, base + 0x600, &state->regs[0x600], 32);
+	if (vi_plane) {
+		regmap_bulk_write(mixer->engine.regs, base + 0x700, &state->regs[0x700], 32);
+		regmap_bulk_write(mixer->engine.regs, base + 0x800, &state->regs[0x800], 32);
+	}
+}
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
index 9fe056a2c1c7..bdd5ba5e385e 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
@@ -10,7 +10,6 @@
 #define _SUN8I_VI_SCALER_H_
 
 #include <drm/drm_fourcc.h>
-#include "sun8i_mixer.h"
 
 #define DE2_VI_SCALER_UNIT_BASE 0x20000
 #define DE2_VI_SCALER_UNIT_SIZE 0x20000
@@ -70,6 +69,14 @@
 #define SUN50I_SCALER_VSU_ANGLE_SHIFT(x)		(((x) << 16) & 0xF)
 #define SUN50I_SCALER_VSU_ANGLE_OFFSET(x)		((x) & 0xFF)
 
+struct sun8i_mixer;
+
+struct scaler_state {
+	u8 regs[0x900];
+};
+
+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer);
+
 void sun8i_vi_scaler_disable(struct sun8i_mixer *mixer, int layer);
 void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-- 
2.42.0

